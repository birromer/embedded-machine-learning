#+TITLE: Embedded Machine Learning

* Introduction
This project aims at implementing and testing machine learning algorithms adapted for an embedded environment. The following classifiers were used:

- Classification and Regression Trees (CART)
- Support Vector Machines (SVM)
- Artificial Neural Networks (ANN)

The task at hand is the identification of musical styles, which is tackled using the [[https://www.kaggle.com/carlthome/gtzan-genre-collection][GTZAN Genre Collection]] dataset. Here, each audio file is stored using the [[https://en.wikipedia.org/wiki/Au_file_format][AU file format]]. A reader has been implemented for this file format, as well as a feature extraction using a [[https://en.wikipedia.org/wiki/Short-time_Fourier_transform#Discrete-time_STFT][Discrete Short-time Fourier transform]].

A full description of the project can be found in the [[https://gitlab.ensta-bretagne.fr/reynetol/embedded-machine-learning][original repository]], together with the base helper routines provided.

* Setup
The project is organized as follows:

#+begin_src bash :exports results :results output
tree -n -L 2 -I 'build|CMake*|__pycache__'
#+end_src

#+RESULTS:
#+begin_example
.
├── ANN
│   └── Python
├── CART
│   ├── CART.py
│   └── train_cart.py
├── DATA
│   ├── blues
│   ├── classical
│   ├── country
│   ├── disco
│   ├── features.csv
│   ├── features_prof.csv
│   ├── features_testing.csv
│   ├── file_list_test.txt
│   ├── file_list_train.txt
│   ├── hiphop
│   ├── jazz
│   ├── metal
│   ├── pop
│   ├── reggae
│   ├── rock
│   └── tests.org
├── Evaluation
│   ├── evaluate_cart.cpp
│   └── evaluation_svm.cpp
├── Extraction
│   ├── features_extraction.cpp
│   ├── features_extraction.h
│   └── main.cpp
├── Helpers
│   ├── au_reading.h
│   ├── etypes.h
│   ├── file_helpers.h
│   ├── globals.h
│   ├── music_style_helpers.cpp
│   ├── music_style_helpers.h
│   ├── print_helpers.h
│   ├── signal.h
│   └── wav_reading.h
├── readme.bash
├── readme.org
├── RF
├── setup.sh
└── SVM
    ├── music_styles_svm.cpp
    └── svm.py

19 directories, 27 files
#+end_example

Each of the classifiers has its folder (=ANN/=, =CART/=, =RF/=, =SVM/=) with a training script, usually in Python for it does not have to be embedded, and a classifier in C++.

- =DATA/= :: Contains the audio files from the dataset. They were not included because of their size, but this view shows the necessary organization for reproducible results.

- =Extraction/=  :: Contains the feature extraction code, implemented only using STFT.

- =Helpers/= :: Contains a multitude of utilities, such as for signal processing, global definitions, and labels management.

- =Evaluation/= :: Contains programs that measure the accuracy, execution time and memory usage of the algorithms. They are invoked individually for each classifier.

** Requirements

** Usage
The first step is to compile the source code, which can be done with the following block, working for both a personal computer and a Raspberry Pi board.

#+begin_src bash :tangle "setup.sh" :exports code :results silent
mkdir -p build
cmake -S . -B build
make -C build
#+end_src

*** Feature extraction
The extraction of features from the audio files must happen before the training steps. In our case we'll be using only the dataset, which is split into training and testing data.

It outputs to the data folder the files =file_list_train.txt= and =file_list_test.txt=, with the file paths for training and testing. The testing one is the input for the evaluation binaries, if no other is provided.

The features are extracted to the files =features_training.csv= and =features_testing.csv=. They correspond to the aforementioned data and are already computed to avoid repeated calls.

Having the project built, the extraction can be executed with the following command:

#+begin_src bash :tangle "setup.sh" :exports code :results silent
./build/Extraction/EXTRACTION
#+end_src

*** CART
In order to use the CART algorithm, you must first build the classification tree.
#+begin_src bash :tangle yes
  python3 CART/train_cart.py
#+end_src

#+RESULTS:

*** SVM

*** ANN

* Results
